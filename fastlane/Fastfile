<<<<<<< HEAD

import_from_git(url: 'https://github.com/rambler-ios/fastlane-flows',
                branch: 'main-lane',
                path: 'fastlane/ConfigurationFastfile')
import_from_git(url: 'https://github.com/rambler-ios/fastlane-flows',
                branch: 'main-lane',
                path: 'fastlane/BuildFastfile')
import_from_git(url: 'https://github.com/rambler-ios/fastlane-flows',
                branch: 'main-lane',
                path: 'fastlane/UploadFastfile')
import_from_git(url: 'https://github.com/rambler-ios/fastlane-flows',
                branch: 'main-lane',
                path: 'fastlane/HelpFastfile')
import_from_git(url: 'https://github.com/rambler-ios/fastlane-flows',
                branch: 'main-lane',
                path: 'fastlane/HookFastfile')
                
=======
import "assets/ConfigurationFastfile"
import "assets/BuildFastfile"
import "assets/UploadFastfile"
import "assets/HelpFastfile"
import "assets/HookFastfile"
>>>>>>> main-lane

desc "Main Lane - Entry Point"
lane :main do |options|

	UI.message("Run main lane with options: #{JSON.pretty_generate(options)}")
	
	return unless obtain_config(options)
	UI.message("Configuration setuped: #{options}")

	changelog = ramb_raw_changelog(options)
	UI.message("Changelog: #{changelog}")

	if options[:only_if_changed] && changelog.nil?

		message = "Build skipped - changelog empty\n"
		options[:result] << message
		UI.important(message)
		return

	end

	unless options[:ftp] && options[:fabric] && options[:fabric]

		message = "Build skipped - upload type not selected!\n"
		options[:result] << message
		UI.important(message)
		return

	end

	#ramb_clear(options)

	#ramb_checkout(options)

	if options[:skip_test]
		UI.message("Tests skipped")
	else
		build_test(options)
	end

	prepare_project(options)

	build(options)

	[:ftp, :fabric, :testflight].each do |upload_type|

		upload(options, upload_type) if options[upload_type]

	end

	artifactory(options)

end

desc "Run tests"
lane :build_test do |options|
  output_directory = 'build/reports'

  scan(
    workspace: options[:xcworkspace_name],
    scheme: options[:sheme],
    output_directory: output_directory,
    skip_slack: is_ci?,
    clean: true
  )

  sh "mv ../#{output_directory}/*.junit ../#{output_directory}/report.xml"
end
