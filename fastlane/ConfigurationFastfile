
############################# Configuration ##############################

def obtain_config(options)

	predefined_branch = options[:branch]
  options[:branch] = 'develop' if predefined_branch.to_s == ''

  options[:xcodeproj_name] = ENV['XCODEPROJ_NAME']
  options[:xcworkspace_name] = ENV['XCWORKSPACE_NAME']
  options[:sheme] = ENV['SCHEME']
  options[:info_plist_path] = File.join(options[:xcodeproj_name], '..', ENV['INFO_PLIST_PATH'])
  options[:entitlements_file] = ENV['ENTITLEMENTS_FILE']


  # Setting up a new version
  current_version = get_version_number(xcodeproj: options[:xcodeproj_name])
  options[:version_number] = current_version

  current_build = get_info_plist_value(
    path: options[:info_plist_path],
    key: 'CFBundleVersion'
  )
  options[:current_build] = current_build

  options[:team_id] = options[:enterprise] ? ENV['ENTERPRISE_TEAM_ID'] : ENV['TEAM_ID']
  options[:xcode_args] = "DEVELOPMENT_TEAM=#{options[:team_id]}"

  options[:provisioning_name] = "#{options[:app_identifier]}_#{options[:team_id]}"


  # Setting up the folder for FTP upload
  options[:ftp_path] = options[:nightly] ? 'nightly' : 'dev'

  options[:export_method] = options[:enterprise] ? 'enterprise' : 'release'

  options[:tag_match_pattern] = options[:nightly] ? 'nightly/*' : 'distribution/*'

  month_name = Date.today.strftime("%B")
  year = Date.today.year
  day = Date.today.day
  month = Date.today.month
  tag_name = options[:nightly] ? 'nightly' : 'distribution'
  options[:tag_name] = "tag_name/#{year}/#{month_name}/#{day}/#{DateTime.now.strftime("%H-%M")}"

  options[:main_target] ||= options[:sheme]
  options[:team_name] = options[:enterprise] ? ENV['ENTERPRISE_TEAM_NAME'] : ENV['TEAM_NAME'] 
  prefix = 'iPhone Distribution: '
  options[:full_team_name] = "#{prefix}#{options[:team_name]}" unless options[:team_name].include?(prefix)

  options[:app_identifier] = options[:enterprise] ? ENV['ENTERPRISE_APP_IDENTIFIER'] : ENV['APP_IDENTIFIER'] 
  options[:app_identifiers] ||= [options[:app_identifier]]

  options[:target_patterns] = ["^#{ENV['SCHEME']}$"] if !options[:target_patterns] && ENV['SCHEME']
  options[:app_plists] = [ENV['INFO_PLIST_PATH']] if !options[:app_plists] && ENV['INFO_PLIST_PATH']

  options[:apple_id] = ENV['APPLE_ID']

  options[:app_name] = ENV['APP_NAME']
  options[:app_name] ||= options[:app_identifier]

  options[:jira_project] = ENV['JIRA_PROJECT']
  options[:jira_transition_name]  = ENV['JIRA_TRANSITION_NAME']
  options[:jira_host] = ENV['JIRA_HOST']
  options[:jira_transition] = nil unless options[:jira_project]
  options[:jira_transition] = nil unless options[:jira_transition_name]

  return false unless validate_config(options)

  options[:result] = "Start build #{options[:nightly] ? 'nightly' : ''} #{options[:app_name]}\n"
  options[:result] << "From #{options[:branch]} branch with #{options[:export_method]} configuration.\n"
  options[:result] << "Upload to #{options[:ftp] ? 'ftp' : ''} #{options[:fabric] ? 'fabric' : ''} #{options[:testflight] ? 'testflight' : ''}\n"
  options[:result] << "Increment build from #{options[:current_build]} to #{options[:current_build].to_i + 1}\n" if options[:increment_build]
  options[:result] << "Tests skipped\n" if options[:skip_test]
  options[:result] << "Oclint analyze enabled\n" if options[:oclint]
  options[:result] << "Jira transition enabled\n" if options[:jira_transition]

  return true

end

def validate_config(options)

  if options[:oclint] && !options[:nightly]

    options[:oclint] = false

    message = "Oclint work only on nightly! Do not waste my time! Oclint disabled!\n"
    UI.error message
    options[:result] << message

  end

  if (options[:testflight] || options[:fabric]) && options[:enterprise]

    options[:testflight] = nil
    build_type = options[:testflight] ? 'TestFlight' : 'Fabric';
    message = "You're trying to build enterprise for uploading to #{build_type}! Don't be daft! #{build_type} uploading disabled!\n"
    UI.error message
    options[:result] << message

  end

  if options[:ftp] && !options[:enterprise]

    options[:ftp] = nil
    message = "You're trying to build not enterprise for uploading to ftp! Ftp uploading disabled!\n"
    UI.error message
    options[:result] << message

  end

  if options[:nightly] && options[:jira_transition]

    options[:jira_transition] = nil
    message = "You're enabled to jira transitions for nightly build! You are so freaky, dude. Jira transitionsdisabled!\n"
    UI.error message
    options[:result] << message

  end

  required_parameters = [:xcodeproj_name,
                         :xcworkspace_name,
                         :sheme,
                         :info_plist_path,
                         :team_name,
                         :app_identifier,
                         :target_patterns,
                         :app_plists,
                         :apple_id,
                         :app_name]

  required_parameters.each do |param|
    unless options[param]
      message = "Parameter #{param} not provided!"
      UI.error message
      options[:result] << message
    end
  end

end